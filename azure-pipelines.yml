
trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: vg-iac-azure

jobs:
- job: Thinkcloudly_Azure_POC
  timeoutInMinutes: 0
  steps: 
  - script: |
      sudo apt-get update
      sudo apt-get -y install unzip
    displayName: Pre-requisite Installation

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: install Terraform v1.1.7
    inputs:
      terraformVersion: '1.1.7'

  - task: TerraformTaskV2@2
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/'
      backendServiceArm: '$(devops)'
      backendAzureRmResourceGroupName: '$(resourceGroup)'
      backendAzureRmStorageAccountName: '$(storageAccount)'
      backendAzureRmContainerName: '$(container)'
      backendAzureRmKey: '$(tfstateFile)'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
    displayName: 'validate'
    inputs:
      provider: 'azurerm'
      command: validate
      workingDirectory: '$(System.DefaultWorkingDirectory)/'
      environmentServiceNameAzureRM: '$(ServicePrinciple)'

  - task: TerraformTaskV2@2
    displayName: terraform plan -out=tfplan
    inputs:
      provider: 'azurerm'
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/'
      commandOptions: '-var-file=configuration.tfvars -out=tfplan'
      environmentServiceNameAzureRM: '$(ServicePrinciple)'

  - task: TerraformTaskV2@2
    displayName: terraform apply tfplan
    #condition: eq(variables.anyTfChanges, true)#
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/'
      commandOptions: 'tfplan'
      environmentServiceNameAzureRM: '$(ServicePrinciple)'
